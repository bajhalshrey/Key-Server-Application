apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "key-server-app.fullname" . }}
  labels:
    {{- include "key-server-app.labels" . | nindent 4 }}
spec:
  # This section handles replica count. If autoscaling is enabled, replicas are managed by HPA.
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    # The selector MUST use 'matchLabels' to specify which pods it manages.
    matchLabels:
      {{- include "key-server-app.selectorLabels" . | nindent 6 }} # <- This indention is crucial
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "key-server-app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      # This specifies the ServiceAccount for the Pods to run as.
      serviceAccountName: {{ include "key-server-app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http # This name must match targetPort in service.yaml
              containerPort: {{ .Values.app.containerPort }} # Your application's listening port (e.g., 8080)
              protocol: TCP
          env:
            # Example environment variables for your Go application
            # Adjust these names based on how your Go app reads configuration
            - name: SRV_PORT
              value: "{{ .Values.app.containerPort }}"
            - name: MAX_KEY_SIZE
              value: "{{ .Values.app.maxKeySize }}"
            {{- if .Values.env }}
            {{- toYaml .Values.env | nindent 12 }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /health
              port: http # References the named port "http" defined above
              scheme: HTTPS # Important if your app serves HTTPS
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /ready
              port: http # References the named port "http" defined above
              scheme: HTTPS # Important if your app serves HTTPS
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}