package keyservice

import (
	"encoding/base64"
	"fmt"
	"log"
	"time"

	"github.com/bajhalshrey/Key-Server-Application/internal/config"
	"github.com/bajhalshrey/Key-Server-Application/internal/keygenerator"
	"github.com/bajhalshrey/Key-Server-Application/internal/metrics"
)

// KeyService defines the interface for key-related operations.
type KeyService interface { // <--- THIS IS NOW AN INTERFACE
	GenerateKey(length int) (string, error)
}

// concreteKeyService implements the KeyService interface.
type concreteKeyService struct { // <--- RENAMED CONCRETE STRUCT
	keyGenerator keygenerator.CryptoKeyGenerator
	config       *config.Config
	metrics      *metrics.PrometheusMetrics // Use the concrete struct pointer
}

// NewKeyService creates and returns a new KeyService instance.
// It returns the interface type.
func NewKeyService(
	kg keygenerator.CryptoKeyGenerator,
	cfg *config.Config,
	m *metrics.PrometheusMetrics,
) KeyService { // <--- RETURNS THE INTERFACE TYPE
	return &concreteKeyService{ // <--- RETURNS INSTANCE OF CONCRETE STRUCT
		keyGenerator: kg,
		config:       cfg,
		metrics:      m,
	}
}

// GenerateKey generates a new key of the specified length.
// It returns the Base64 URL-encoded string of the key.
func (s *concreteKeyService) GenerateKey(length int) (string, error) { // <--- METHOD ON CONCRETE STRUCT
	s.metrics.IncrementKeyGenerationRequests()

	if length <= 0 || length > s.config.MaxSize {
		s.metrics.IncrementInvalidKeyLengthErrors()
		return "", fmt.Errorf("key length %d is out of allowed range (1-%d)", length, s.config.MaxSize)
	}

	start := time.Now()
	keyBytes, err := s.keyGenerator.Generate(length) // keyGenerator.Generate returns []byte
	duration := time.Since(start).Seconds()

	s.metrics.ObserveKeyGenerationDuration(duration, length)

	if err != nil {
		s.metrics.IncrementKeyGenerationErrors()
		log.Printf("Error generating key: %v", err)
		return "", fmt.Errorf("failed to generate key: %w", err)
	}

	s.metrics.ObserveKeyLength(float64(length))

	return EncodeKey(keyBytes), nil // Encode the generated byte slice to a Base64 string
}

// EncodeKey encodes a byte slice into a Base64 URL-safe string.
// This function is EXPORTED (capital 'E').
func EncodeKey(key []byte) string {
	return base64.URLEncoding.EncodeToString(key)
}
